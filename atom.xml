<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Eric's Blog]]></title>
  <link href="http://yannbelief.github.io/atom.xml" rel="self"/>
  <link href="http://yannbelief.github.io/"/>
  <updated>2013-06-17T16:02:01+08:00</updated>
  <id>http://yannbelief.github.io/</id>
  <author>
    <name><![CDATA[Eric]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[sd5-5]]></title>
    <link href="http://yannbelief.github.io/blog/2013/06/16/sd5-5/"/>
    <updated>2013-06-16T00:31:00+08:00</updated>
    <id>http://yannbelief.github.io/blog/2013/06/16/sd5-5</id>
    <content type="html"><![CDATA[<p>林佳和 「產業民主」與「勞動體制」的簡單歷史回顧</p>

<hr />

<p>「勞動體制」的世界發展史：英國、愛爾蘭除外的歐陸國家</p>

<p>台灣的制度（若有的話）以歐陸為師。</p>

<p>台灣從倡議開始至今 20 年，台灣真正有意義的實現在 2000 年，扁政府上台（但不是主因），有 10 年的光景。</p>

<hr />

<p>產業民主的脈絡：不是因為統合主義催生產業民主，但產業民主的最高峰是在統合主義的環境之下。</p>

<p>產業民主不脫離統合主義的脈絡，也就是資本主義國家有史以來的最佳發展狀態。短短 50 年而已（1950 年代末期 ~ 1980）。</p>

<p>今天看的產業民主是那個時代被定格的狀態，但往前可以朔及一百年，往後到今天。</p>

<hr />

<p>先從 1960  年代談起：一個簡單的斷代史。</p>

<p>統合主義的環境與條件：有些是理型、在大量生產、大量消費、一個美國主導的世界金融貿易國際刺激下（「福特主義」）</p>

<p>韋伯的理型(ideal type)：人們意識想要追求、甚至一定程度想要實踐，但不代表現實是如此。</p>

<p>福特主義與我們關心的產業民主有很大的關聯，但產業民主卻沒有在美國誕生，因為美國的福特主義毋寧是一種「生產方式」。</p>

<p>而「生產關係」在歐洲有完全不一樣的背景。</p>

<p>福特主義現象為 1960 年代經濟繁榮，經濟奇蹟，政治相對穩定，工資上升、勞動條件改善，改革取代革命。</p>

<p>19 世紀末「修正主義」的大辯論，一直到 1960 年代似乎得到了一個答案。一個在歷史上至少大家都接受的答案，革命幾乎不再可能。</p>

<p>革命的五大條件在 1960 年代幾乎不存在。很重要的背景是：社會福利國家的出現。</p>

<p>雖然大家認為 welfare state 是來自英國，事實上可從德國適用於勞工的全民健康保險的 1883 年開始算。</p>

<p>在這個期間是產業民主我們想像最典型的狀態。</p>

<hr />

<p>經濟發展好的時候勞工運動強，也就是我們認知的「制度性」的產業民主。</p>

<p>好景不常，榮景維持不超過 1980 年。</p>

<p>我們以 1979 年 雷根經濟學、柴契爾夫人主義，作為統合主義（也包括產業民主），一個重要的、由盛轉衰的歷程。</p>

<hr />

<p>統合主義的假設、基本結構：勞工在有不同層級有政治跟社會參與（各國不一樣）</p>

<p>勞工有社會民主政黨，歐陸各國的社會民主黨都是從工會的社會民主運動開始。</p>

<p>沒有強大的工會，就不會有社會民主運動，沒有社會民主運動就不會有社會民主政黨出現。</p>

<p>所以如果沒有前面兩者，想成立一個社會民主政黨（包括台灣在內），一定是失敗的。</p>

<p>如果勞工有自己的政黨，在很大的情況下可以得到政權，他也一定程度的參與國家機關（小到社會保險監理，大到國家經濟部門都可以有勞工的參與）</p>

<p>（勞工不以政黨形式參與國家機關的例子為，北歐國家瑞典在二戰前的全國經濟委員會就有勞工的代表在裡面）</p>

<hr />

<p>勞工對抗資本被法律化</p>

<p>一戰前：歐洲各國的工會被視為合法組織</p>

<p>一戰至二戰期間：工會的罷工除罪化，不再是刑事犯罪，但是在民法仍被視為違反契約行為，所以罷工前要先自行離職，否則構成債務不履行。</p>

<p>二戰後：罷工在民法上也沒有問題。統合主義達到最高峰，「對抗資本」被法律化、制度化。</p>

<p>整個資本主義的法律體制，罷工是唯一容許你、甚至是鼓勵你傷害契約他方的權益。（沒有別的了）</p>

<p>歐洲人 19 世紀的理念：「罷工必須以傷害雇主權益作為目標; 不能損害雇主的罷工，像乞丐在路上集體行乞，不享有法律的保障。」</p>

<p>歐洲的工會不需要領工會證書，故法院判斷是否為工會的依據是「有沒有傷害對方的能力與結果」</p>

<p>1998 年基隆客運罷工的法院判決：「罷工固然為勞工合法權益，但不得傷害雇主利益」（林教授：「那我們就不知道罷工要做什麼」）</p>

<hr />

<p>勞工參與資本（今天的主題）</p>

<p>「勞工參與資本」必須在「勞工對抗資本」的脈絡下才能理解。</p>

<p>勞工若沒有對抗、沒有真正參與政治生活、或參與國家機關、要如何參與資本？若有，也是國家收編下的掩飾與虛假。</p>

<p>e.g. 中共的工會，沒有其他條件、不具備正當性。</p>

<hr />

<p>理型(ideal type)的產業民主在 1960 年在西北歐誕生的背景與條件</p>

<p>追求「社會公平」、「民主人權」是產業民主的關鍵。</p>

<p>北歐的產業民主有其太特殊的條件無法複製。德國經過100多年激烈的勞資對抗。</p>

<hr />

<p>德國工會的發展歷程</p>

<p>1830~1870:社會主義興起</p>

<p>1870~1890:俾斯麥用蘿菠與棍棒對付社會主義：</p>

<p>蘿菠：</p>

<p>「十小時法案」勞動法令、禁止童工</p>

<p>「社會福利體制」：1883 年開始有適用勞工的全民健康保險、職業災害保險</p>

<p>法律上不承認工會，但警察不再取締工會</p>

<p>棍棒：</p>

<p>「社會主義黨人法」：用刑事制裁對付社會主義黨人</p>

<p>結果，工會分裂成與資方集體協商的經濟性工會（爭取工資上揚、工時下降），和與資方對抗的社會主義路線（後分裂成左翼德國共產黨、右翼社民黨）</p>

<p>1890~1910：修正主義，工會逐漸蛻變成經濟性組織。</p>

<p>二戰結束：單一性工會：不再區分意識形態</p>

<p>‘50: 工會重建、去納粹化</p>

<p>‘60：經濟奇蹟、勞動體制的確立，由工會爭取而來</p>

<p>‘70：經濟繁榮、勞工要更多、勞資激烈對抗</p>

<hr />

<p>二戰後</p>

<p>1950 去納粹化。德國人要求追究企業（與納粹合作）的責任、要求大企業國有化。美國人以「大企業1/2董事由工會推派代表來擔任」favor 來交換大企業不進行國有化 (即 1951 年的「煤鋼鐵業共同決定」)</p>

<p>之後 1952 年德國會推動「煤鋼鐵業共同決定法」 、「企業組織法」</p>

<p>1976 年推動「共同決定法」，適用於全國各大企業。</p>

<p>即勞工董事的由來。</p>

<hr />

<p>德國產業民主的兩大系統（雙軌制）</p>

<p>第一軌：對抗（以工會為主，由勞工組成，歐陸稱「同盟」）</p>

<p>對抗的邏輯：自由對抗，沒有任何法律規定，唯一的合法性界線：刑法，不能使用暴力。</p>

<p>第二軌：共同決定（co-determination） 勞工參與企業的管理（參與雇主的管理）</p>

<p>以兩千頁的法典（「共同決定法」）來制度化，用詳盡的法律規定，來確保制度化操作。</p>

<p>（歐洲人笑看美國的所謂「公司治理」，只要沒有法律規定，（勞工參與公司決策）一定是一場空。不能期待企業的善意。）</p>

<p>廣泛到對員工的考核標準、去外面設廠、明年的財務計畫、生產組織的改造、新式機器的引進、、等等都要讓勞工參與</p>

<p>小到要勞工加班要勞工同意、要解僱某個勞工要經過員工代表會的聽證，要解僱重要幹部要經過員工代表會的同意</p>

<p>參與管理的組織：工廠會議/員工代表會 (work council) since 1890。1920 年達到最高峰。</p>

<p>參與經營：由工會推派代表的勞工董事，能阻擋惡意併購。也可見美國的惡意併購遠比歐洲嚴重。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重構案例1-DirDesc]]></title>
    <link href="http://yannbelief.github.io/blog/2013/05/17/zhong-gou-an-li-1-dirdesc/"/>
    <updated>2013-05-17T13:00:00+08:00</updated>
    <id>http://yannbelief.github.io/blog/2013/05/17/zhong-gou-an-li-1-dirdesc</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>這個案例是個人 DirDesc Project 裡的程式碼，問題出在產生 GUI 元件的方法裡夾雜了各種不同的顯示邏輯，這些邏輯應該在種類判定之時，就予以決定，卻擠在 GUI 元件產生的前一刻，才做判斷，以至於在各種邏輯交雜之處的 getRowEntity 方法內產生了許多 bug，在除錯上增加了許多困難。</p>

<p>以下的重構即是企圖釐清複雜邏輯的嘗試。</p>

<h2 id="section-1">重構前</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">add_row</span> <span class="n">path</span>
</span><span class="line">	<span class="n">row</span> <span class="o">=</span> <span class="n">genFileRow</span> <span class="nb">name</span><span class="p">,</span>  <span class="n">path</span><span class="p">,</span> <span class="n">desc</span> <span class="p">,</span><span class="s2">&quot;_____&quot;</span>
</span><span class="line">	<span class="c1">#add row logic</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">genDirRow</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">desc</span><span class="p">)</span>
</span><span class="line">	<span class="n">getRowEntity</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">dir</span><span class="o">+</span><span class="s2">&quot;/../&quot;</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;&lt;==&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="k">def</span> <span class="nf">genFileRow</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span><span class="n">path</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="n">tags</span><span class="p">)</span>
</span><span class="line">	<span class="n">getRowEntity</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span><span class="n">path</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="n">tags</span><span class="p">,</span><span class="s2">&quot;==&gt;&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">getRowEntity</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span><span class="n">path</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="n">tags</span><span class="p">,</span><span class="n">dir_tag</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="n">fn</span> <span class="o">=</span> <span class="n">fn</span><span class="o">+</span><span class="s2">&quot;/&quot;</span> <span class="k">if</span> <span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">stat</span> <span class="n">fn</span><span class="p">)</span><span class="o">.</span><span class="n">directory?</span>
</span><span class="line">	<span class="n">path</span> <span class="o">=</span> <span class="n">path</span><span class="o">+</span><span class="s2">&quot;/&quot;</span> <span class="k">if</span> <span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">stat</span> <span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">directory?</span>
</span><span class="line">
</span><span class="line">	<span class="c1">#code to gen row GUI (omitted)</span>
</span><span class="line">	<span class="n">tag_event_box</span><span class="o">.</span><span class="n">signal_connect</span><span class="p">(</span><span class="s2">&quot;button_press_event&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">		<span class="k">if</span> <span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">stat</span> <span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">directory?</span>
</span><span class="line">			<span class="c1">#code to open dir with DirDesc</span>
</span><span class="line"> 		<span class="k">end</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">重構1：將邏輯移出的嘗試</h2>

<p>(r) genDirRow -&gt; genThisDirRow 重新命名</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">genThisDirRow</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">desc</span><span class="p">)</span>
</span><span class="line">	<span class="k">return</span> <span class="n">getRowEntity</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">dir</span><span class="o">+</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;&lt;==&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(+) genSubDirRow : 新增為處理子目錄顯示元件的生成邏輯預留的 method</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">genSubDirRow</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">desc</span><span class="p">)</span>
</span><span class="line">	<span class="k">return</span> <span class="n">getRowEntity</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="s2">&quot;/../&quot;</span><span class="p">,</span><span class="s2">&quot;==&gt;&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(m) 將判斷是否為目錄而將路徑結尾加上斜線的邏輯從 getRowEntity 向上移至 genFileRow</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">genFileRow</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span><span class="n">open_path</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="n">tags</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">stat</span> <span class="n">open_path</span><span class="p">)</span><span class="o">.</span><span class="n">directory?</span>
</span><span class="line">		<span class="n">open_path</span> <span class="o">=</span> <span class="n">open_path</span><span class="o">+</span><span class="s2">&quot;/&quot;</span>
</span><span class="line">		<span class="n">fn</span> <span class="o">=</span> <span class="n">fn</span><span class="o">+</span><span class="s2">&quot;/&quot;</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">	<span class="n">getRowEntity</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span><span class="n">open_path</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="n">tags</span><span class="p">,</span><span class="s2">&quot;==&gt;&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">getRowEntity</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span><span class="n">path</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="n">tags</span><span class="p">,</span><span class="n">dir_tag</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="c1">#code to gen row GUI (omitted)</span>
</span><span class="line">	<span class="n">tag_event_box</span><span class="o">.</span><span class="n">signal_connect</span><span class="p">(</span><span class="s2">&quot;button_press_event&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">		<span class="k">if</span> <span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">stat</span> <span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">directory?</span>
</span><span class="line">			<span class="c1">#code to open dir with DirDesc</span>
</span><span class="line"> 		<span class="k">end</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">	<span class="n">row</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">重構2：重新命名與抽取更多變動項</h2>

<p>(+) genFileOrDirRow: 再將判斷是否為目錄的邏輯從 genFileRow 抽取出來，給予適當的名稱。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">genFileOrDirRow</span><span class="p">(</span><span class="n">open_path</span><span class="p">,</span><span class="n">desc</span><span class="p">)</span>
</span><span class="line">	<span class="nb">name</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">open_path</span><span class="p">)</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">stat</span> <span class="n">open_path</span><span class="p">)</span><span class="o">.</span><span class="n">directory?</span>
</span><span class="line">		<span class="n">genSubDirRow</span><span class="p">(</span><span class="nb">name</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="p">,</span><span class="n">desc</span><span class="p">)</span>
</span><span class="line">	<span class="k">else</span>
</span><span class="line">		<span class="n">genFileRow</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="n">open_path</span><span class="p">,</span><span class="n">desc</span><span class="p">)</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(m) genFileRow: 留下的為純粹給予相關配置參數並調用 GUI 元件生成函式的邏輯</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">genFileRow</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span><span class="n">open_path</span><span class="p">,</span><span class="n">desc</span><span class="p">)</span>
</span><span class="line">	<span class="n">getRowEntity</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span><span class="n">open_path</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="s2">&quot;_____&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(+) genDiveDirHanlder : 將針對目錄符號點擊才有的切換功能，從 getRowEntity 抽取出來。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">genDiveDirHanlder</span><span class="p">(</span><span class="n">dive_path</span><span class="p">)</span>
</span><span class="line">	<span class="nb">lambda</span> <span class="p">{</span>
</span><span class="line">		<span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span>
</span><span class="line">			<span class="c1"># code to open another GUI window</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line"> 	<span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(m) getRowEntity : 最後留下來的 getRowEntity 為純粹產生 GUI 元件的功能</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">getRowEntity</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span> <span class="n">open_path</span><span class="p">,</span> <span class="n">desc</span><span class="p">,</span> <span class="n">tags</span><span class="p">,</span> <span class="n">dive_path_handler</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">	<span class="c1">#code to gen row GUI (omitted)</span>
</span><span class="line">	<span class="k">if</span> <span class="n">dive_path_handler</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class="line">		<span class="n">tag_event_box</span><span class="o">.</span><span class="n">signal_connect</span><span class="p">(</span><span class="s2">&quot;button_press_event&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">			<span class="n">dive_path_handler</span><span class="o">.</span><span class="n">call</span>
</span><span class="line">		<span class="k">end</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(m) genSubDirRow, genThisDirRow: 針對當下目錄與子目錄點擊時開啟不同資料夾的邏輯，因為 genDiveDirHanlder 輔助函式的抽取，而得以往上浮現至相關配置變數一起給定的地方。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">genSubDirRow</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">desc</span><span class="p">)</span>
</span><span class="line">	<span class="k">return</span> <span class="n">getRowEntity</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">dir</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="s2">&quot;==&gt;&quot;</span><span class="p">,</span><span class="n">genDiveDirHanlder</span><span class="p">(</span><span class="n">dir</span><span class="p">))</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">genThisDirRow</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">desc</span><span class="p">)</span>
</span><span class="line">	<span class="k">return</span> <span class="n">getRowEntity</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">dir</span><span class="p">,</span><span class="n">desc</span><span class="p">,</span><span class="s2">&quot;&lt;==&quot;</span><span class="p">,</span><span class="n">genDiveDirHanlder</span><span class="p">(</span><span class="n">dir</span><span class="o">+</span><span class="s2">&quot;/../&quot;</span><span class="p">))</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>現在觀察到 SubDirRow, ThisDirRow, 與早先重構的 FileRow 都有各自的配置變數。這些配置變數會依照不同的 Row 種類而一起改變。值得將這些變數設計成配置物件來保存。</p>

<h2 id="section-4">最後的重構：配置物件的建立</h2>

<p>將各種 Row 的配置變數抽取成物件之後產生 ThisDirConfig, SubDirConfig, FileConfig 三種實作同樣方法的類別，原本配置變數被封裝成各自方法的回傳值。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ThisDirConfig</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">		<span class="c1">#p &quot;init #{path}&quot;</span>
</span><span class="line">		<span class="vi">@abs_path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">absolute_path</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">getwd</span><span class="p">)</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nf">path</span>
</span><span class="line">		<span class="vi">@abs_path</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nf">display</span>
</span><span class="line">		<span class="vi">@abs_path</span><span class="o">+</span><span class="s2">&quot;/&quot;</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nf">dive_path</span>
</span><span class="line">		<span class="vi">@abs_path</span> <span class="o">+</span> <span class="s2">&quot;/../&quot;</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nf">dive_display</span>
</span><span class="line">		<span class="s2">&quot;&lt;==&quot;</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">
</span><span class="line">	<span class="k">def</span> <span class="nf">desc_path</span>
</span><span class="line">		<span class="vi">@abs_path</span> <span class="o">+</span> <span class="s2">&quot;/.desc&quot;</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SubDirConfig</span>
</span><span class="line">	<span class="c1"># code omitted</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">FileConfig</span>
</span><span class="line">	<span class="c1"># code omitted</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(-) genSubDirRow, genThisDirRow, genFileRow : 將配置變數抽取成物件之後，原本作為其存放位置的三個方法責任已盡，予以移除。</p>

<p>(+) add_row_by_config, gen_row_by_config : 因應 Config 物件產生而改變的方法，方法傳入的參數因為共屬於 config 物件而結合在一起，較原始版本簡潔。因為上面三個方法的消失與 Config 物件的產生，genDiveDirHanlder 方法的調用處再次回到產生 GUI 的方法內。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">add_row_by_config</span> <span class="n">config</span>
</span><span class="line">	<span class="c1"># code to get desc</span>
</span><span class="line">	<span class="n">row</span> <span class="o">=</span> <span class="n">gen_row_by_config</span> <span class="n">config</span><span class="p">,</span> <span class="n">desc</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">gen_row_by_config</span> <span class="n">config</span><span class="p">,</span> <span class="n">desc</span>
</span><span class="line">	<span class="c1"># code to gen row GUI</span>
</span><span class="line">	<span class="k">if</span> <span class="n">config</span><span class="o">.</span><span class="n">dive_path</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class="line">		<span class="n">tag_event_box</span><span class="o">.</span><span class="n">signal_connect</span><span class="p">(</span><span class="s2">&quot;button_press_event&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">			<span class="n">genDiveDirHanlder</span><span class="p">(</span><span class="n">config</span><span class="o">.</span><span class="n">dive_path</span><span class="p">)</span><span class="o">.</span><span class="n">call</span>
</span><span class="line">		<span class="k">end</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">	<span class="n">row</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(m) processing flow: 最後的處理流程。在一開始變動路徑被偵測到時立刻判斷使否為目錄，並產生相關的配置物件。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#entry code</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">stat</span> <span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">directory?</span>
</span><span class="line">	<span class="n">c</span> <span class="o">=</span><span class="p">(</span><span class="no">SubDirConfig</span><span class="o">.</span><span class="n">new</span> <span class="n">path</span><span class="p">)</span>					
</span><span class="line"><span class="k">else</span>
</span><span class="line">	<span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="no">FileConfig</span><span class="o">.</span><span class="n">new</span> <span class="n">path</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="n">add_row_by_config</span>  <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-5">後記</h2>

<p>整個重構流程的指導原則為 SRP 單一責任原則，即一個區塊內程式碼的變更只能有一種理由。以此將風馬牛不相干的程式碼移出該區塊。此例中為將判斷是否為目錄而決定顯示字串的邏輯，移出 GUI 元件生成邏輯。</p>

<h2 id="section-6">心得</h2>

<p>初用 ruby 寫 project 有些 naming style 還是因襲著 Java, C# 的習慣，多寫一點應該會改善。這個案例重構起來很累人，但是後來發現值得寫成教材。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inheritance: When?]]></title>
    <link href="http://yannbelief.github.io/blog/2013/05/10/inheritance-when/"/>
    <updated>2013-05-10T13:57:00+08:00</updated>
    <id>http://yannbelief.github.io/blog/2013/05/10/inheritance-when</id>
    <content type="html"><![CDATA[<p>何時使用繼承？</p>

<blockquote>
  <p>Inheritance is appropriate only in circumstances where the subclass really is a subtype of the superclass. In other words, a class B should extend a class A only if an “is-a” relationship exists between the two classes. If you are tempted to have a class B extend a class A, ask yourself the question: <strong>Is every B really an A?</strong> If you cannot truthfully answer yes to this question, B should not extend A. If the answer is no, it is often the case that B should contain a private instance of A and expose a smaller and simpler API: A is not an essential part of B, merely a detail of its implementation. (Effective Java, 2/e, p.85~86)</p>
</blockquote>

<p>換句話說就是繼承的關係要符合 Liskov Substitution Principle。在原本使用父類別的場合（e.g. 方法、類別）傳入子類別時，不會產生不一致的行為。</p>

<p>使用繼承唯有當父類別是專門設計來給子類別繼承的（e.g. 抽象父類別）。換句話說，父類別有意識到未來可能產生的繼承關係。（最極端的例子是介面，它是專門設計用來讓子類別填入實作方法的。）</p>

<p>父類別若包含太多實作方法，子類別繼承之後很容易修改到原本的實作，或可能產生退化的實作方法<sub><a href="#1">1</a></sub>（頭重腳輕）。用 Uncle Bob 的穩定度分析來說，即一個套件的穩定程度應該要跟它的抽象程度一致。套用在類別上也適用。父類別是依賴關係中的最下層，屬於被依賴的一方，對依賴它的子類別有維護功能合約的責任，所以需要較大的穩定度，不應該包含太多的實作細節。</p>

<h2 id="section">註：</h2>

<p><a id="1"></a>[1] 就像這隻解釋 LSP 影片中的 Car 例子，Tesla 實作了 Car 介面，但它是電動車，無須變速箱<sub><a href="#2">2</a></sub>，所以面對 Car 介面要求提供的 GearShiftUp() <sub><a href="#3">3</a></sub>方法採取了退化的實作，即產生不做事的空白方法，或者在方法被呼叫時丟出例外。這兩種實作均產生了非預期的行為，與 Car 介面擔保的功能不同。這種狀況違反了 LSP，會破壞原本依賴 Car 介面約定的功能而運作正常的程式碼，所以我們說 Tesla 不是一個（有變速箱的） Car 。 
影片來源： <a href="http://www.d80.co.uk/post/2013/04/05/LSP-The-Liskov-Substitution-Principle-in-5-minutes.aspx">LSP - The Liskov Substitution Principle in 5 minutes</a></p>

<p><a id="2"></a>[2] Tesla Model S 不需要變速箱、傳動軸、與排氣管。來源：<a href="http://www.inside.com.tw/2013/01/26/tesla">鋼鐵人的四門房車，Tesla Model S 試駕</a></p>

<p><a id="3"></a>[3] Gear shift up ：換檔，換至大的齒輪， 切換到低轉速高力道的檔位。 參考文件：<a href="http://www.ecodrive.org/en/what_is_ecodriving-/the_golden_rules_of_ecodriving/#shift">Shift up early - The golden rules of ecodriving</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiline Comments in python]]></title>
    <link href="http://yannbelief.github.io/blog/2013/05/09/this-is-test-page/"/>
    <updated>2013-05-09T03:57:00+08:00</updated>
    <id>http://yannbelief.github.io/blog/2013/05/09/this-is-test-page</id>
    <content type="html"><![CDATA[<h2 id="multiline-comments-in-python">Multiline Comments in python</h2>
<p>You can use triple-quoted strings. When they’re not a docstring (first thing in a class/function/module), they are ignored.</p>

<p>Guido van Rossum (creator of Python) approves.</p>
<pre>
'''
This is a multiline
comment.
'''
</pre>
<p>From <a href="http://stackoverflow.com/questions/7696924/multiline-comments-in-python">Multiline Comments in python</a></p>

<p>Ref <a href="http://stackoverflow.com/questions/397148/why-doesnt-python-have-multiline-comments">Why doesn’t Python have multiline comments?</a></p>

]]></content>
  </entry>
  
</feed>
